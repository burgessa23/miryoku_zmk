// Copyright 2022 Manna Harbour
// https://github.com/manna-harbour/miryoku

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_46keys_hillside.h"

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 // right-hand keys
#define THUMBS LH3 LH2 LH1 LH0 RH0 RH1 RH2 RH3                                      // thumb keys

#define QUICK_TAP_TERM 175

/*                                      46 KEY MATRIX / LAYOUT MAPPING

  ╭────────────────────────╮               ╭────────────────────────╮
  │  0   1   2   3   4   5 │               │  6   7   8   9  10  11 │
  │ 12  13  14  15  16  17 ╰──╮         ╭──╯ 18  19  20  21  22  23 │
  │ 24  25  26  27  28  29  30╰────┬────╯31  32  33  34  35  36  37 │
  ╰───────────────╮ 38  39  40  41 │ 42  43  44  45 ╭───────────────╯
                  ╰────────────────┴────────────────╯
 ╭─────────────────────────╮               ╭─────────────────────────╮
 │ LT5 LT4 LT3 LT2 LT1 LT0 │               │ RT0 RT1 RT2 RT3 RT4 RT5 │
 │ LM5 LM4 LM3 LM2 LM1 LM0 ╰──╮         ╭──╯ RM0 RM1 RM2 RM3 RM4 RM5 │
 │ LB5 LB4 LB3 LB2 LB1 LB0 LH4╰────┬────╯RH4 RB0 RB1 RB2 RB3 RB4 RB5 │
 ╰───────────────╮ LH3 LH2 LH1 LH0 │ RH0 RH1 RH2 RH3 ╭───────────────╯
                 ╰─────────────────┴───── ───────────╯
 T : Top
 M : Middle
 B : Bottom
 H : Hand
 P : Palm
*/

/ {
  behaviors {
    hrasA: hrasA {
        compatible = "zmk,behavior-hold-tap";
        label = "hrasA";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <250>;
        quick-tap-ms = <QUICK_TAP_TERM>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <KEYS_R THUMBS>;
        hold-trigger-on-release;             // delay positional check until key-release
        retro-tap;
        retro-tap-behavior = "KEY_PRESS";
        retro-tap-param1 = <LS(A)>;
    };
    hrasS: hrasS {
        compatible = "zmk,behavior-hold-tap";
        label = "hrasS";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <250>;
        quick-tap-ms = <QUICK_TAP_TERM>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <KEYS_R THUMBS>;
        hold-trigger-on-release;             // delay positional check until key-release
        retro-tap;
        retro-tap-behavior = "KEY_PRESS";
        retro-tap-param1 = <N4>;
    };
    hrasD: hrasD {
        compatible = "zmk,behavior-hold-tap";
        label = "hrasD";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <250>;
        quick-tap-ms = <QUICK_TAP_TERM>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <KEYS_R THUMBS>;
        hold-trigger-on-release;             // delay positional check until key-release
        retro-tap;
        retro-tap-behavior = "KEY_PRESS";
        retro-tap-param1 = <N5>;
    };
    hrasF: hrasF {
        compatible = "zmk,behavior-hold-tap";
        label = "hrasF";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <250>;
        quick-tap-ms = <QUICK_TAP_TERM>;
        hold-trigger-key-positions = <KEYS_R THUMBS>;
        hold-trigger-on-release;             // delay positional check until key-release
        bindings = <&kp>, <&kp>;
        retro-tap;
        retro-tap-behavior = "KEY_PRESS";
        retro-tap-param1 = <N6>;
    };
    hrasJ: hrasJ {
        compatible = "zmk,behavior-hold-tap";
        label = "hrasJ";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <250>;
        quick-tap-ms = <QUICK_TAP_TERM>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <KEYS_L THUMBS>;
        hold-trigger-on-release;             // delay positional check until key-release
        retro-tap;
        retro-tap-behavior = "KEY_PRESS";
        retro-tap-param1 = <LS(J)>;
    };
    hrasK: hrasK {
        compatible = "zmk,behavior-hold-tap";
        label = "hrasK";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <250>;
        quick-tap-ms = <QUICK_TAP_TERM>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <KEYS_L THUMBS>;
        hold-trigger-on-release;             // delay positional check until key-release
        retro-tap;
        retro-tap-behavior = "KEY_PRESS";
        retro-tap-param1 = <LS(K)>;
    };
    hrasL: hrasL {
        compatible = "zmk,behavior-hold-tap";
        label = "hrasL";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <250>;
        quick-tap-ms = <QUICK_TAP_TERM>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <KEYS_L THUMBS>;
        hold-trigger-on-release;             // delay positional check until key-release
        retro-tap;
        retro-tap-behavior = "KEY_PRESS";
        retro-tap-param1 = <LS(L)>;
    };
    hrasSQT: hrasSQT {
        compatible = "zmk,behavior-hold-tap";
        label = "hrasSQT";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <250>;
        quick-tap-ms = <QUICK_TAP_TERM>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <KEYS_L THUMBS>;
        hold-trigger-on-release;             // delay positional check until key-release
        retro-tap;
        retro-tap-behavior = "KEY_PRESS";
        retro-tap-param1 = <LS(SQT)>;
    };
    clnasFN: clnasFN {
        compatible = "zmk,behavior-hold-tap";
        label = "clnasFN";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <175>;
        quick-tap-ms = <QUICK_TAP_TERM>;
        bindings = <&mo>, <&kp>;
        retro-tap;
        retro-tap-behavior = "KEY_PRESS";
        retro-tap-param1 = <LS(SEMI)>;
    };
        hold-trigger-key-positions = <KEYS_R THUMBS>;
        hold-trigger-on-release;             // delay positional check until key-release
    u_mt: u_mt {
      compatible = "zmk,behavior-hold-tap";
      label = "u_mt";
      #binding-cells = <2>;
      tapping_term_ms = <U_TAPPING_TERM>;
      quick-tap-ms = <175>;
      global-quick-tap-ms = <150>;
      flavor = "hold-preferred";
      bindings = <&kp>, <&kp>;
    };
    u_ltnum: u_ltnum {
      compatible = "zmk,behavior-hold-tap";
      label = "u_ltnum";
      #binding-cells = <2>;
      tapping_term_ms = <U_TAPPING_TERM>;
      flavor = "hold-preferred";
      bindings = <&mo>, <&kp>;
    };
    u_lt: u_lt {
      compatible = "zmk,behavior-hold-tap";
      label = "u_lt";
      #binding-cells = <2>;
      quick-tap-ms = <175>;
      tapping_term_ms = <U_TAPPING_TERM>;
      flavor = "hold-preferred";
      bindings = <&mo>, <&kp>;
    };
    u_bp: u_bp {
        compatible = "zmk,behavior-tap-dance";
        label = "u_bp";
        #binding-cells = <0>;
        tapping-term-ms = <350>;
        bindings = <&kp LG(LBKT)>, <&kp LG(PIPE)>;
    };
    u_bf: u_bf {
        compatible = "zmk,behavior-tap-dance";
        label = "u_bf";
        #binding-cells = <0>;
        tapping-term-ms = <350>;
        bindings = <&kp LG(LBKT)>, <&kp LG(RBKT)>, <&kp LG(PIPE)>;
    };
    u_fp: u_fp {
        compatible = "zmk,behavior-tap-dance";
        label = "u_fp";
        #binding-cells = <0>;
        tapping-term-ms = <350>;
        bindings = <&kp LG(RBKT)>, <&kp LG(PIPE)>;
    };
    bp_wrap: bp_wrap {
        compatible = "zmk,behavior-hold-tap";
        label = "bp_wrap";
        #binding-cells = <2>;
        tapping_term_ms = <250>;
        flavor = "balanced";
        bindings = <&kp>, <&u_bp>;
    };
    fp_wrap: fp_wrap {
        compatible = "zmk,behavior-hold-tap";
        label = "fp_wrap";
        #binding-cells = <2>;
        tapping_term_ms = <250>;
        flavor = "balanced";
        bindings = <&kp>, <&u_fp>;
    };
    u_ray: u_ray {
        compatible = "zmk,behavior-tap-dance";
        label = "u_ray";
        #binding-cells = <0>;
        tapping-term-ms = <350>;
        bindings = <&kp LS(LG(SPACE))>, <&kp LA(TAB)>;
    };
    ray_wrap: ray_wrap {
        compatible = "zmk,behavior-hold-tap";
        label = "RAY_WRAP";
        #binding-cells = <2>;
        tapping_term_ms = <250>;
        flavor = "balanced";
        bindings = <&kp>, <&kp>;
    };
    u_esc_caps: u_esc_caps {
        compatible = "zmk,behavior-tap-dance";
        label = "U_ESC_CAPS";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&kp ESC>, <&u_caps_word>;
    };
    shft_num_word: shft_num_word {
        compatible = "zmk,behavior-hold-tap";
        label = "SHFT_NUM_WORD";
        #binding-cells = <2>;
        tapping_term_ms = <250>;
        flavor = "hold-preferred";
        bindings = <&kp>, <&swapper>;
    };
    shft_caps_word: shft_caps_word {
        compatible = "zmk,behavior-hold-tap";
        label = "SHFT_CAPS_WORD";
        #binding-cells = <2>;
        tapping_term_ms = <250>;
        flavor = "hold-preferred";
        bindings = <&kp>, <&kp>;
    };
    u_sym_bspc: u_sym_bspc {
        compatible = "zmk,behavior-tap-dance";
        label = "u_sym_bspc";
        #binding-cells = <0>;
        tapping-term-ms = <10>;
        bindings = <&kp BSPC>, <&kp BSPC>;
    };
    sym_bspc_wrap: sym_bspc_wrap {
        compatible = "zmk,behavior-hold-tap";
        label = "SYM_BSPC_WRAP";
        #binding-cells = <2>;
        tapping_term_ms = <550>;
        flavor = "balanced";
        bindings = <&mo>, <&u_sym_bspc>;
    };
    u_zoom: u_zoom {
        compatible = "zmk,behavior-tap-dance";
        label = "u_zoom";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&kp LS(LG(A))>, <&kp LS(LG(V))>;
    };
    as: auto_shift {
        compatible = "zmk,behavior-hold-tap";
        label = "AUTO_SHIFT";
        #binding-cells = <2>;
        tapping_term_ms = <250>;
        quick_tap_ms = <QUICK_TAP_TERM>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };
    nst: nav_shift_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "SHIFT_SPACE";
        #binding-cells = <2>;
        tapping_term_ms = <200>;
        quick_tap_ms = <150>;
        global-quick-tap;
        flavor = "tap-preferred";
        bindings = <&s_nav_wrap>, <&kp>;
    };
    s_nav: shift_nav {
        compatible = "zmk,behavior-hold-tap";
        label = "SHIFT_NAV";
        #binding-cells = <2>;
        tapping_term_ms = <200>;
        global-quick-tap;
        flavor = "tap-preferred";
        bindings = <&mo_nav>, <&kp_shift>;
    };
    space_nav_tap: space_nav_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "space_nav_tap";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings = <&kp SPACE>, <&tog U_NAV>;
    };
    s_n_s: shift_nav_space {
        compatible = "zmk,behavior-hold-tap";
        label = "SHIFT_NAV_SPACE";
        #binding-cells = <2>;
        tapping-term-ms = <150>;
        quick_tap_ms = <100>;
        flavor = "balanced";
        bindings = <&kp>, <&kp>;
        retro-tap;
        retro-tap-behavior = "TOGGLE_LAYER";
        retro-tap-param1 = <U_NAV>;
    };
    col_semi: colon_semicolon {
        compatible = "zmk,behavior-mod-morph";
        label = "COLON_SEMICOLON";
        #binding-cells = <0>;
        bindings = <&kp COLON>, <&kp SEMI>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
  };
  macros {
    mo_nav: mo_nav {
        label = "mo_nav";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &mo U_NAV>
            , <&macro_pause_for_release>
            , <&macro_release &mo U_NAV>
            ;
    };
    kp_shift: kp_shift {
        label = "kp_shift";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LSHFT>
            , <&macro_pause_for_release>
            , <&macro_release &kp LSHFT>
            ;
    };
    s_nav_wrap: s_nav_wrap {
        label = "s_nav_wrap";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &s_nav U_NAV LSHFT>
            , <&macro_pause_for_release>
            , <&macro_release &s_nav U_NAV LSHFT>
            ;
    };
  };
};

ZMK_BEHAVIOR(u_hml, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    global-quick-tap-ms = <150>;         // requires PR #1387
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* right-hand HRMs */
ZMK_BEHAVIOR(u_hmr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    global-quick-tap-ms = <150>;         // requires PR #1387
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)


ZMK_BEHAVIOR(u_back_pipe, tap_dance,
    tapping-term-ms = <275>;
    bindings = <&kp LG(LBKT)>, <&kp LG(PIPE)>;
)

ZMK_BEHAVIOR(u_fwd_pipe, tap_dance,
    tapping-term-ms = <275>;
    bindings = <&kp LG(RBKT)>, <&kp LG(PIPE)>;
)


ZMK_BEHAVIOR(space_caps_word, tap_dance,
    tapping-term-ms = <280>;
    bindings = <&kp SPACE>, <&u_caps_word>;
)

ZMK_BEHAVIOR(parens, tap_dance,
    tapping-term-ms = <250>;
    bindings = <&kp LPAR>, <&kp RPAR>;
)


ZMK_BEHAVIOR(bksp_p, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp P>, <&kp BSPC>;
)

ZMK_BEHAVIOR(esc_q, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp Q>, <&kp ESC>;
)

ZMK_BEHAVIOR(sticky_helper, macro,
    wait-ms = <0>;
    tap-ms = <0>;
    bindings = <&kp SPACE &macro_tap_time 150 &sl 1>;
)

ZMK_BEHAVIOR(ht2, hold_tap,
    tapping-term-ms = <50>;
    quick-tap-ms = <975>;                // repeat on tap-into-hold
    bindings = <&kp>, <&kp>;
)

&num_word {
    layers = <U_NUM>;  // replace NUM by the location of numbers layer
};

ZMK_BEHAVIOR(asn, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <250>;
    bindings = <&kp>, <&kp>;
)

ZMK_BEHAVIOR(nc_word, tap_dance,
    tapping-term-ms = <250>;
    bindings = <&u_caps_word>, <&num_word>;
)

ZMK_BEHAVIOR(none_caps_word, tap_dance,
    tapping-term-ms = <250>;
    bindings = <&u_caps_word>, <&rev_swapper>;
)

ZMK_BEHAVIOR(none_num_word, tap_dance,
    tapping-term-ms = <250>;
    bindings = <&num_word>, <&swapper>;
)

ZMK_BEHAVIOR(u_left, tap_dance,
    tapping-term-ms = <250>;
    bindings = <&kp LA(LEFT)>, <&kp LG(LEFT)>;
)

ZMK_BEHAVIOR(u_right, tap_dance,
    tapping-term-ms = <250>;
    bindings = <&kp LA(RIGHT)>, <&kp LG(RIGHT)>;
)
ZMK_COMBO(cmb_lshft,  &kp LSHFT, 30 40, ALL)
ZMK_COMBO(cmb_rshft,  &kp RSHFT, 31 43, ALL)
ZMK_COMBO(cmb_smmouse,  &smart_mouse, 12 41, ALL)
ZMK_COMBO(cmb_capword,  &u_caps_word, 12 40, ALL)
ZMK_COMBO(cmb_numword,  &num_word, 23 43, ALL)
ZMK_COMBO(cmb_alt_gui,  &kp LA(LGUI), 40 43, ALL)

// Alt+Tab swapper, requires PR #1366
ZMK_BEHAVIOR(swapper, tri_state,
    bindings = <&kt LCMD>, <&kp TAB>, <&kt LCMD>;
    ignored-key-positions = <LM5>;
)

ZMK_BEHAVIOR(rev_swapper, tri_state,
    bindings = <&kt LS(LCMD)>, <&kp TAB>, <&kt LS(LCMD)>;
)

ZMK_BEHAVIOR(smart_mouse, tri_state,
    bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>;
    ignored-layers = <MOUSE>;
)
