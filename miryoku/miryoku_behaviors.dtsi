// Copyright 2022 Manna Harbour
// https://github.com/manna-harbour/miryoku

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_52keys_hillside.h"

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 // right-hand keys
#define THUMBS LH3 LH2 LH1 LH0 RH0 RH1 RH2 RH3                                      // thumb keys
/ {
  behaviors {
    u_mt: u_mt {
      compatible = "zmk,behavior-hold-tap";
      label = "u_mt";
      #binding-cells = <2>;
      tapping_term_ms = <U_TAPPING_TERM>;
      quick-tap-ms = <175>;
      global-quick-tap-ms = <150>;
      flavor = "balanced";
      bindings = <&kp>, <&kp>;
    };
    u_lt: u_lt {
      compatible = "zmk,behavior-hold-tap";
      label = "u_lt";
      #binding-cells = <2>;
      tapping_term_ms = <U_TAPPING_TERM>;
      flavor = "tap-preferred";
      bindings = <&mo>, <&kp>;
    };
    u_ray: u_ray {
        compatible = "zmk,behavior-tap-dance";
        label = "u_ray";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings = <&kp LS(LG(SPACE))>, <&kp LS(LA(C))>;
    };
    ray_wrap: ray_wrap {
        compatible = "zmk,behavior-hold-tap";
        label = "RAY_WRAP";
        #binding-cells = <2>;
        tapping_term_ms = <550>;
        flavor = "balanced";
        bindings = <&kp>, <&u_ray>;
    };
    u_esc_caps: u_esc_caps {
        compatible = "zmk,behavior-tap-dance";
        label = "u_esc_caps";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&kp ESC>, <&u_caps_word>;
    };
    med_caps_word: med_caps_word {
        compatible = "zmk,behavior-hold-tap";
        label = "MED_CAPS_WORD";
        #binding-cells = <2>;
        tapping_term_ms = <250>;
        global-quick-tap-ms = <150>;         // requires PR #1387
        flavor = "balanced";
        bindings = <&mo>, <&u_caps_word >;
    };
    u_sym_bspc: u_sym_bspc {
        compatible = "zmk,behavior-tap-dance";
        label = "u_sym_bspc";
        #binding-cells = <0>;
        tapping-term-ms = <10>;
        bindings = <&kp BSPC>, <&kp BSPC>;
    };
    sym_bspc_wrap: sym_bspc_wrap {
        compatible = "zmk,behavior-hold-tap";
        label = "SYM_BSPC_WRAP";
        #binding-cells = <2>;
        tapping_term_ms = <550>;
        flavor = "balanced";
        bindings = <&mo>, <&u_sym_bspc>;
    };
    u_nav_space: u_nav_space {
        compatible = "zmk,behavior-tap-dance";
        label = "u_nav_space";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&kp SPACE>, <&mo U_NAV>;
    };
    shift_space_nav: shift_space_nav {
        compatible = "zmk,behavior-hold-tap";
        label = "SHIFT_SPACE_NAV";
        #binding-cells = <2>;
        tapping_term_ms = <250>;
        flavor = "balanced";
        bindings = <&kp>, <&u_nav_space>;
    };
    u_zoom: u_zoom {
        compatible = "zmk,behavior-tap-dance";
        label = "u_zoom";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&kp LS(LG(A))>, <&kp LS(LG(V))>;
    };
    as: auto_shift {
        compatible = "zmk,behavior-hold-tap";
        label = "AUTO_SHIFT";
        #binding-cells = <2>;
        tapping_term_ms = <135>;
        quick_tap_ms = <0>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };
    nst: nav_shift_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "SHIFT_SPACE";
        #binding-cells = <2>;
        tapping_term_ms = <250>;
        quick_tap_ms = <50>;
        global-quick-tap;
        flavor = "tap-preferred";
        bindings = <&s_nav_wrap>, <&kp>;
    };
    s_nav: shift_nav {
        compatible = "zmk,behavior-hold-tap";
        label = "SHIFT_NAV";
        #binding-cells = <2>;
        tapping_term_ms = <300>;
        quick_tap_ms = <100>;
        global-quick-tap;
        flavor = "tap-preferred";
        bindings = <&mo_nav>, <&kp_shift>;
    };
  };
  macros {
    mo_nav: mo_nav {
        label = "mo_nav";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &mo U_NAV>
            , <&macro_pause_for_release>
            , <&macro_release &mo U_NAV>
            ;
    };
    kp_shift: kp_shift {
        label = "kp_shift";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LSHFT>
            , <&macro_pause_for_release>
            , <&macro_release &kp LSHFT>
            ;
    };
    s_nav_wrap: s_nav_wrap {
        label = "s_nav_wrap";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &s_nav U_NAV LSHFT>
            , <&macro_pause_for_release>
            , <&macro_release &s_nav U_NAV LSHFT>
            ;
    };
  };
};

ZMK_BEHAVIOR(u_hml, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <300>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    global-quick-tap-ms = <150>;         // requires PR #1387
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* right-hand HRMs */
ZMK_BEHAVIOR(u_hmr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <300>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    global-quick-tap-ms = <150>;         // requires PR #1387
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)


ZMK_BEHAVIOR(u_back_fwd, tap_dance,
    tapping-term-ms = <275>;
    bindings = <&kp LG(LBKT)>, <&kp LG(RBKT)>, <&kp LG(PIPE)>;
)


ZMK_BEHAVIOR(space_nav_dance, tap_dance,
    tapping-term-ms = <280>;
    bindings = <&kp SPACE>, <&mo U_NAV>;
)

ZMK_BEHAVIOR(parens, tap_dance,
    tapping-term-ms = <250>;
    bindings = <&kp LPAR>, <&kp RPAR>;
)


ZMK_BEHAVIOR(bksp_p, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp P>, <&kp BSPC>;
)

ZMK_BEHAVIOR(esc_q, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp Q>, <&kp ESC>;
)

ZMK_BEHAVIOR(sticky_helper, macro,
    wait-ms = <0>;
    tap-ms = <0>;
    bindings = <&kp SPACE &macro_tap_time 150 &sl 1>;
)

ZMK_BEHAVIOR(ht2, hold_tap,
    tapping-term-ms = <50>;
    quick-tap-ms = <975>;                // repeat on tap-into-hold
    bindings = <&kp>, <&kp>;
)

